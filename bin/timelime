#! /usr/bin/ruby

begin
  require 'optparse'
  require 'timelime'
rescue
  puts "lib require failed"
  exit 1
end

$options = {}
ARGV.options do |opt|

  opt.banner = "Usage: timelime options"

  opt.on("-h", "--help", "print help") do
    puts opt
    exit
  end

  opt.on("-v", "--version", "print version") do
    puts "timelime version: #{Timelime::VERSION}"
    exit
  end

  opt.on("-f", "--file [PATH]", "include path recursively") do |path|
    unless path.nil? or path.empty?
      $options[:file] = $options[:file].to_a + [path]
    end
  end

  opt.on("-p", "--precision [NUM]", "timeline event precision") do |prec|
    if prec.nil?
      next
    end
    tmp = prec.to_i
    if tmp.to_s == prec
      $options[:precision] = tmp
    end
  end

  opt.on("-t", "--tags-exc [@tag1 @tag2]", "process all but given tags") do |tags|
    $options[:tagsExc] = $options[:tagsExc].to_a + [tags]
  end

  opt.on("-T", "--tags-inc [@tag1 @tag2]", "process only given tags") do |tags|
    $options[:tagsInc] = $options[:tagsInc].to_a + [tags]
  end

  opt.on("-r", "--range-process [x - y]", "process only events matching given range") do |range|
    $options[:rangeP] = $options[:rangeP].to_a + [range]
  end

  opt.on("-R", "--range-display [x - y]", "display axis only within given range") do |range|
    $options[:rangeD] = range
  end

  opt.on("-l", "--locate [STR]", "locate event across given files") do |str|
    if str.nil?
      next
    end
    $options[:locate] = $options[:locate].to_a + [str.downcase]
  end

  opt.on("-i", "--info [HEAD]", "print HEAD information") do |head|
    if head.nil?
      next
    end
    $options[:info] = $options[:info].to_a + [head]
  end

  opt.parse!

end

tree  = Timelime::Tree.new( $options[:file].to_a )
table = Timelime::Table.new

$options[:rangeP].to_a.each do |time|
  begin
    table.time(time)
  rescue
    $stderr.puts "ERR: invalid time syntax: \"#{time}\""
    exit 1
  end
end

unless $options[:rangeD].nil?
  begin
    Timelime::Time.new($options[:rangeD])
  rescue
    $stderr.puts "ERR: invalid time syntax: \"#{$options[:rangeD]}\""
    exit 1
  end
end

[
  $options[:tagsInc].to_a,
  $options[:tagsExc].to_a,
].each_with_index do |tmp, mode|
  tmp.each do |tags|
    begin
      table.tags(tags, mode)
    rescue
      $stderr.puts "ERR: invalid tags syntax: \"#{tags}\""
      exit 1
    end
  end
end

tree.get do |file|
  Timelime.parse(file) do |event, line|

    unless table.push event
      next
    end

    $options[:locate].to_a.each do |str|
      if event.head.to_s.downcase.include? str
        puts "#{event.head}: #{file} line #{line}"
        break
      end
    end

    $options[:info].to_a.each do |head|
      if event.head.to_s == head
        puts "#{event.time}"
        puts "#{event.tags}"
      end

    end

  end

end

if table.size == 0 or !$options[:locate].nil? or !$options[:info].nil?
  exit
end

axis = Timelime::Axis.new(table)
unless $options[:rangeD].nil?
  axis.time($options[:rangeD])
end
axis.generate $options[:precision]

puts
Timelime::dump axis
puts
